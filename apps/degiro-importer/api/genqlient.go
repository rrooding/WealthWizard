// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"github.com/Khan/genqlient/graphql"
)

// CreateTransactionCreateTransaction includes the requested fields of the GraphQL type Transaction.
type CreateTransactionCreateTransaction struct {
	Isin     string `json:"isin"`
	Broker   string `json:"broker"`
	BrokerId string `json:"brokerId"`
}

// GetIsin returns CreateTransactionCreateTransaction.Isin, and is useful for accessing the field via an interface.
func (v *CreateTransactionCreateTransaction) GetIsin() string { return v.Isin }

// GetBroker returns CreateTransactionCreateTransaction.Broker, and is useful for accessing the field via an interface.
func (v *CreateTransactionCreateTransaction) GetBroker() string { return v.Broker }

// GetBrokerId returns CreateTransactionCreateTransaction.BrokerId, and is useful for accessing the field via an interface.
func (v *CreateTransactionCreateTransaction) GetBrokerId() string { return v.BrokerId }

// CreateTransactionResponse is returned by CreateTransaction on success.
type CreateTransactionResponse struct {
	CreateTransaction CreateTransactionCreateTransaction `json:"createTransaction"`
}

// GetCreateTransaction returns CreateTransactionResponse.CreateTransaction, and is useful for accessing the field via an interface.
func (v *CreateTransactionResponse) GetCreateTransaction() CreateTransactionCreateTransaction {
	return v.CreateTransaction
}

// IsOKResponse is returned by IsOK on success.
type IsOKResponse struct {
	Typename string `json:"__typename"`
}

// GetTypename returns IsOKResponse.Typename, and is useful for accessing the field via an interface.
func (v *IsOKResponse) GetTypename() string { return v.Typename }

type NewTransaction struct {
	Isin   string `json:"isin"`
	Broker string `json:"broker"`
	// If the broker does not supply an ID for the transaction, an ID is generated based on
	// the rest of the data.
	BrokerId string `json:"brokerId"`
}

// GetIsin returns NewTransaction.Isin, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetIsin() string { return v.Isin }

// GetBroker returns NewTransaction.Broker, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetBroker() string { return v.Broker }

// GetBrokerId returns NewTransaction.BrokerId, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetBrokerId() string { return v.BrokerId }

// __CreateTransactionInput is used internally by genqlient
type __CreateTransactionInput struct {
	Input NewTransaction `json:"input"`
}

// GetInput returns __CreateTransactionInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateTransactionInput) GetInput() NewTransaction { return v.Input }

// The query or mutation executed by CreateTransaction.
const CreateTransaction_Operation = `
mutation CreateTransaction ($input: NewTransaction!) {
	createTransaction(input: $input) {
		isin
		broker
		brokerId
	}
}
`

func CreateTransaction(
	client_ graphql.Client,
	input NewTransaction,
) (*CreateTransactionResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateTransaction",
		Query:  CreateTransaction_Operation,
		Variables: &__CreateTransactionInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateTransactionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		nil,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IsOK.
const IsOK_Operation = `
query IsOK {
	__typename
}
`

func IsOK(
	client_ graphql.Client,
) (*IsOKResponse, error) {
	req_ := &graphql.Request{
		OpName: "IsOK",
		Query:  IsOK_Operation,
	}
	var err_ error

	var data_ IsOKResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		nil,
		req_,
		resp_,
	)

	return &data_, err_
}

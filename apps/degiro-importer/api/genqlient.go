// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"time"

	"github.com/Khan/genqlient/graphql"
)

// CreateTransactionCreateTransaction includes the requested fields of the GraphQL type Transaction.
type CreateTransactionCreateTransaction struct {
	ID string `json:"ID"`
}

// GetID returns CreateTransactionCreateTransaction.ID, and is useful for accessing the field via an interface.
func (v *CreateTransactionCreateTransaction) GetID() string { return v.ID }

// CreateTransactionResponse is returned by CreateTransaction on success.
type CreateTransactionResponse struct {
	CreateTransaction CreateTransactionCreateTransaction `json:"createTransaction"`
}

// GetCreateTransaction returns CreateTransactionResponse.CreateTransaction, and is useful for accessing the field via an interface.
func (v *CreateTransactionResponse) GetCreateTransaction() CreateTransactionCreateTransaction {
	return v.CreateTransaction
}

// IsOKResponse is returned by IsOK on success.
type IsOKResponse struct {
	Typename string `json:"__typename"`
}

// GetTypename returns IsOKResponse.Typename, and is useful for accessing the field via an interface.
func (v *IsOKResponse) GetTypename() string { return v.Typename }

type MoneyInput struct {
	Amount   string `json:"amount"`
	Currency string `json:"currency"`
}

// GetAmount returns MoneyInput.Amount, and is useful for accessing the field via an interface.
func (v *MoneyInput) GetAmount() string { return v.Amount }

// GetCurrency returns MoneyInput.Currency, and is useful for accessing the field via an interface.
func (v *MoneyInput) GetCurrency() string { return v.Currency }

type NewTransaction struct {
	ISIN            string     `json:"ISIN"`
	Broker          string     `json:"Broker"`
	Date            time.Time  `json:"Date"`
	Exchange        string     `json:"Exchange"`
	Amount          int        `json:"Amount"`
	Price           MoneyInput `json:"Price"`
	TransactionCost MoneyInput `json:"TransactionCost"`
	// If the broker does not supply an ID for the transaction, an ID is generated based on
	// the rest of the data.
	BrokerID string `json:"BrokerID"`
}

// GetISIN returns NewTransaction.ISIN, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetISIN() string { return v.ISIN }

// GetBroker returns NewTransaction.Broker, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetBroker() string { return v.Broker }

// GetDate returns NewTransaction.Date, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetDate() time.Time { return v.Date }

// GetExchange returns NewTransaction.Exchange, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetExchange() string { return v.Exchange }

// GetAmount returns NewTransaction.Amount, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetAmount() int { return v.Amount }

// GetPrice returns NewTransaction.Price, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetPrice() MoneyInput { return v.Price }

// GetTransactionCost returns NewTransaction.TransactionCost, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetTransactionCost() MoneyInput { return v.TransactionCost }

// GetBrokerID returns NewTransaction.BrokerID, and is useful for accessing the field via an interface.
func (v *NewTransaction) GetBrokerID() string { return v.BrokerID }

// __CreateTransactionInput is used internally by genqlient
type __CreateTransactionInput struct {
	Input NewTransaction `json:"input"`
}

// GetInput returns __CreateTransactionInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateTransactionInput) GetInput() NewTransaction { return v.Input }

// The query or mutation executed by CreateTransaction.
const CreateTransaction_Operation = `
mutation CreateTransaction ($input: NewTransaction!) {
	createTransaction(input: $input) {
		ID
	}
}
`

func CreateTransaction(
	client_ graphql.Client,
	input NewTransaction,
) (*CreateTransactionResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateTransaction",
		Query:  CreateTransaction_Operation,
		Variables: &__CreateTransactionInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateTransactionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		nil,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by IsOK.
const IsOK_Operation = `
query IsOK {
	__typename
}
`

func IsOK(
	client_ graphql.Client,
) (*IsOKResponse, error) {
	req_ := &graphql.Request{
		OpName: "IsOK",
		Query:  IsOK_Operation,
	}
	var err_ error

	var data_ IsOKResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		nil,
		req_,
		resp_,
	)

	return &data_, err_
}
